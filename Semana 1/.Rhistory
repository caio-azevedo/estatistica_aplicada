reticulate::repl_python()
# Importação dos pacotes necessários
import pandas as pd #manipulação de dados em formato de dataframe
from scipy.stats import chi2_contingency #estatística qui-quadrado
from scipy.stats.contingency import association #medidas de associação
import matplotlib.pyplot as plt #biblioteca de visualização de dados
import seaborn as sns #biblioteca de visualização de informações estatísticas
import numpy as np #biblioteca para operações matemáticas multidimensionais
from scipy.stats import pearsonr #cálculo da correlação de Pearson
import pandas as pd #manipulação de dados em formato de dataframe
from scipy.stats import chi2_contingency #estatística qui-quadrado
from scipy.stats.contingency import association #medidas de associação
import matplotlib.pyplot as plt #biblioteca de visualização de dados
import seaborn as sns #biblioteca de visualização de informações estatísticas
import numpy as np #biblioteca para operações matemáticas multidimensionais
from scipy.stats import pearsonr #cálculo da correlação de Pearson
df_planosaude = pd.read_csv('PlanoSaude.csv', delimiter=',')
import pandas as pd #manipulação de dados em formato de dataframe
# Importação dos pacotes necessários
import pandas as pd #manipulação de dados em formato de dataframe
from scipy.stats import chi2_contingency #estatística qui-quadrado
from scipy.stats.contingency import association #medidas de associação
import matplotlib.pyplot as plt #biblioteca de visualização de dados
import seaborn as sns #biblioteca de visualização de informações estatísticas
import numpy as np #biblioteca para operações matemáticas multidimensionais
from scipy.stats import pearsonr #cálculo da correlação de Pearson
reticulate::py_discover_config()
quit
library(reticulate)
reticulate::repl_python()
# Importação dos pacotes necessários
import pandas as pd #manipulação de dados em formato de dataframe
from scipy.stats import chi2_contingency #estatística qui-quadrado
from scipy.stats.contingency import association #medidas de associação
import matplotlib.pyplot as plt #biblioteca de visualização de dados
import seaborn as sns #biblioteca de visualização de informações estatísticas
import numpy as np #biblioteca para operações matemáticas multidimensionais
from scipy.stats import pearsonr #cálculo da correlação de Pearson
reticulate::py_discover_config()
reticulate::install_miniconda()
quit
# Importação dos pacotes necessários
import pandas as pd #manipulação de dados em formato de dataframe
reticulate::py_discover_config()
reticulate::py_install(c("pip", "setuptools", "wheel"), pip = TRUE)
reticulate::py_require(c("pip", "setuptools", "wheel"))
reticulate::py_require(c("pip", "setuptools", "wheel"))
reticulate::py_require("scipy")
reticulate::py_run_string("
from scipy.stats import pearsonr
print(pearsonr([1,2,3,4],[2,4,6,8]))
")
reticulate::repl_python()
# Importação dos pacotes necessários
import pandas as pd #manipulação de dados em formato de dataframe
from scipy.stats import chi2_contingency #estatística qui-quadrado
from scipy.stats.contingency import association #medidas de associação
import matplotlib.pyplot as plt #biblioteca de visualização de dados
import seaborn as sns #biblioteca de visualização de informações estatísticas
import numpy as np #biblioteca para operações matemáticas multidimensionais
from scipy.stats import pearsonr #cálculo da correlação de Pearson
quit
reticulate::py_require("pandas", "matplotlib", "seaborn", "numpy")
reticulate::py_require(c("pandas", "matplotlib", "seaborn", "numpy"))
reticulate::py_require(c("pandas", "matplotlib", "seaborn", "numpy"))
library(reticulate)
reticulate::py_require(c("pandas", "matplotlib", "seaborn", "numpy"))
reticulate::repl_python()
# Importação dos pacotes necessários
import pandas as pd #manipulação de dados em formato de dataframe
from scipy.stats import chi2_contingency #estatística qui-quadrado
from scipy.stats.contingency import association #medidas de associação
import matplotlib.pyplot as plt #biblioteca de visualização de dados
import seaborn as sns #biblioteca de visualização de informações estatísticas
import numpy as np #biblioteca para operações matemáticas multidimensionais
from scipy.stats import pearsonr #cálculo da correlação de Pearson
quit
reticulate::py_require(c("scipy"))
reticulate::repl_python()
# Importação dos pacotes necessários
import pandas as pd #manipulação de dados em formato de dataframe
from scipy.stats import chi2_contingency #estatística qui-quadrado
from scipy.stats.contingency import association #medidas de associação
import matplotlib.pyplot as plt #biblioteca de visualização de dados
import seaborn as sns #biblioteca de visualização de informações estatísticas
import numpy as np #biblioteca para operações matemáticas multidimensionais
from scipy.stats import pearsonr #cálculo da correlação de Pearson
df_planosaude = pd.read_csv('PlanoSaude.csv', delimiter=',')
View(df_planosaude)
df_planosaude
tabela_completa = pd.crosstab(df_planosaude['operadora'],
df_planosaude['satisfacao'], margins=True)
View(tabela_completa)
tabela_conting = pd.crosstab(df_planosaude['operadora'],
df_planosaude['satisfacao'])
chi2, pvalor, df, freq_esp = chi2_contingency(tabela_conting)
View(df_planosaude)
chi2, freq_esp = chi2_contingency(tabela_conting)
residuos = tabela_conting - freq_esp
View(residuos)
quit
rm(list=ls())
reticulate::repl_python()
import pandas as pd #manipulação de dados em formato de dataframe
from scipy.stats import chi2_contingency #estatística qui-quadrado
from scipy.stats.contingency import association #medidas de associação
import matplotlib.pyplot as plt #biblioteca de visualização de dados
import seaborn as sns #biblioteca de visualização de informações estatísticas
import numpy as np #biblioteca para operações matemáticas multidimensionais
from scipy.stats import pearsonr #cálculo da correlação de Pearson
globals().clear()
import pandas as pd #manipulação de dados em formato de dataframe
from scipy.stats import chi2_contingency #estatística qui-quadrado
from scipy.stats.contingency import association #medidas de associação
import matplotlib.pyplot as plt #biblioteca de visualização de dados
import seaborn as sns #biblioteca de visualização de informações estatísticas
import numpy as np #biblioteca para operações matemáticas multidimensionais
from scipy.stats import pearsonr #cálculo da correlação de Pearson
# Carregamento da base de dados 'PlanoSaude'
df_planosaude = pd.read_csv('cia_MB.csv', delimiter=',')
df_planosaude = pd.read_csv('cia_MB.csv', delimiter=',')
df_planosaude = pd.read_csv('cia_MB.csv', delimiter=';')
View(df_planosaude)
df_planosaude = pd.read_csv('cia_MB.csv', delimiter=';', dec=",")
df_planosaude = pd.read_csv('cia_MB.csv', delimiter=';', decimal = ",")
View(df_planosaude)
View(df_planosaude)
df_planosaude['V'], margins=True)
df_planosaude[Y]
df_planosaude['Y']
df_planosaude['V']
df_ciaMB['V'], margins=True)
pd.crosstab(df_ciaMB['Y'], df_ciaMB['V'], margins=True)
df_ciaMB = pd.read_csv('cia_MB.csv', delimiter=';', decimal = ",")
pd.crosstab(df_ciaMB['Y'], df_ciaMB['V'], margins=True)
tabela_completa = pd.crosstab(df_ciaMB['Y'], df_ciaMB['V'], margins=True)
View(tabela_completa)
df_ciaMB['V'])
tabela_conting = pd.crosstab(df_ciaMB['Y'], df_ciaMB['V'])
chi2, pvalor, df, freq_esp = chi2_contingency(tabela_conting)
'p-value':[pvalor]})
pd.DataFrame({'Qui-quadrado':[chi2], 'Graus de liberdade':[df],'p-value':[pvalor]})
residuos = tabela_conting - freq_esp
View(residuos)
View(df_ciaMB)
View(tabela_completa)
print("Formato (linhas, colunas):", df_ciaMB.shape)
print("\nTipos das colunas:\n", df_ciaMB.dtypes)
print("\nPrimeiras linhas:\n", df_ciaMB.head())
print("\nValores ausentes por coluna:\n", df_ciaMB.isna().sum())
df = pd.read_csv('cia_MB.csv', delimiter=';', decimal = ",")
tab_abs = pd.crosstab(df['Y'], df['V'], margins=True, margins_name='Total')
View(tab_abs)
tab_prop_all = pd.crosstab(df['Y'], df['V'], normalize='all').round(3)
View(tab_prop_all)
ax = tab_prop_row.plot(kind='bar', stacked=True)
ax.set_xlabel("Grau de Instrução (Y)")
ax.set_ylabel("Proporção")
ax.set_title("Distribuição conjunta por linha (Y) — V (região)")
ax.legend(title="Região (V)", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()
ax = tab_prop_row.plot(kind='bar', stacked=True)
tab_prop_row = pd.crosstab(df['Y'], df['V'], normalize='index').round(3)
tab_prop_col = pd.crosstab(df['Y'], df['V'], normalize='columns').round(3)
ax = tab_prop_row.plot(kind='bar', stacked=True)
ax.set_xlabel("Grau de Instrução (Y)")
ax.set_ylabel("Proporção")
ax.set_title("Distribuição conjunta por linha (Y) — V (região)")
ax.legend(title="Região (V)", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()
quit
a <- rep(c("Consumidor", "São Paulo"),214)
a <- rep(c("Consumidor", "Produtor", "Escola", "Outros"),c(376,643,343,189))
df <- data.frame("cooperativa"=a)
View(df)
c <- rep(c("São Paulo", "Paraná", "Rio G. do Sul"), c(214,51,111))
c <- rep(c("São Paulo", "Paraná", "Rio G. do Sul"), c(214,51,111))
p <- rep(c("São Paulo", "Paraná", "Rio G. do Sul"), c(237,102,304))
e <- rep(c("São Paulo", "Paraná", "Rio G. do Sul"), c(78,126,139))
o <- rep(c("São Paulo", "Paraná", "Rio G. do Sul"), c(119,22,48))
b <- rbind(c,p,e,o)
b <- rbind(c(c,p,e,o))
df <- data.frame("cooperativa"=a, "estado"=b)
View(df)
b <- cbind(c,p,e,o)
b <- cbind(c(c,p,e,o))
b <- rbind(c,p,e,o)
estado <- c(cons,prod,esc,out)
cons <- rep(c("São Paulo", "Paraná", "Rio G. do Sul"), c(214,51,111))
prod <- rep(c("São Paulo", "Paraná", "Rio G. do Sul"), c(237,102,304))
esc <- rep(c("São Paulo", "Paraná", "Rio G. do Sul"), c(78,126,139))
out <- rep(c("São Paulo", "Paraná", "Rio G. do Sul"), c(119,22,48))
estado <- c(cons,prod,esc,out)
source("~/.active-rstudio-document", echo=TRUE)
View(df)
library(readr)
write_csv(df, "cooperativa.csv", na = "")
write_excel_csv2(df, "cooperativa.csv", na = "")
